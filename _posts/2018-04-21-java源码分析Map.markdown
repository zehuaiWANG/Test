---
layout:     post
title:      "Java源码分析 Map"
subtitle:   " \"Map源码分析\""
date:       2018-04-20 17:00:00
author:     "Mike"
header-img: "img/2.png"
catalog: true
tags:
    - Java
---

> “Come on. ”
## 源码


    package java.util;
    
    import java.util.function.BiConsumer;
    import java.util.function.BiFunction;
    import java.util.function.Function;
    import java.io.Serializable;
    public interface Map<K,V> {
    // 返回map中键值对集合的数目
    int size();
    // 判断map是否为空
    boolean isEmpty();
    // 判断map是否有指定的key元素
    boolean containsKey(Object key);
    // 判断map中有没有一个或多个key对应的value
    boolean containsValue(Object value);
    // 通过key得到value
    V get(Object key);
    // 将key/value放入map
    V put(K key, V value);
    // 移除键为key的元素并返回对应的value
    V remove(Object key);
    // 把一个map中的所有元素放到该map
    void putAll(Map<? extends K, ? extends V> m);
    // 清除map中的所有元素
    void clear();
    // 返回map中所有key的集合，该方法并非创建一个全新的集合，如果对
    // 该集合删除将影响原来map中的元素
    Set<K> keySet();
    // 返回map中所有value的集合，该方法并非创建一个全新的集合，如果对
    // 该集合删除将影响原来map中的元素
    Collection<V> values();
    // 返回map中所有entry的集合，该方法并非创建一个全新的集合，如果对
    // 该集合删除将影响原来map中的元素
    Set<Map.Entry<K, V>> entrySet();
    
    // map元素接口，分装成K-V格式
    interface Entry<K,V> {
    // 获得key的值
    K getKey();
    // 获得value的值
    V getValue();
    // 设置entry的值
    V setValue(V value);
    // 是否相等
    boolean equals(Object o);
    // 返回hash值
    int hashCode();
    public static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K,V>> comparingByKey() {
    return (Comparator<Map.Entry<K, V>> & Serializable)
    (c1, c2) -> c1.getKey().compareTo(c2.getKey());
    }
    public static <K, V extends Comparable<? super V>> Comparator<Map.Entry<K,V>> comparingByValue() {
    return (Comparator<Map.Entry<K, V>> & Serializable)
    (c1, c2) -> c1.getValue().compareTo(c2.getValue());
    }
    public static <K, V> Comparator<Map.Entry<K, V>> comparingByKey(Comparator<? super K> cmp) {
    Objects.requireNonNull(cmp);
    return (Comparator<Map.Entry<K, V>> & Serializable)
    (c1, c2) -> cmp.compare(c1.getKey(), c2.getKey());
    }
    
    public static <K, V> Comparator<Map.Entry<K, V>> comparingByValue(Comparator<? super V> cmp) {
    Objects.requireNonNull(cmp);
    return (Comparator<Map.Entry<K, V>> & Serializable)
    (c1, c2) -> cmp.compare(c1.getValue(), c2.getValue());
    }
    }
    
    boolean equals(Object o);
    
    int hashCode();
    
    default V getOrDefault(Object key, V defaultValue) {
    V v;
    return (((v = get(key)) != null) || containsKey(key))
    ? v
    : defaultValue;
    }
    
    //jdk8才有的
    //Map<String, Integer> map = new HashMap<String, Integer>();
    //map.put("A", 10);
    //map.put("B", 20);
    //map.put("C", 30);
    //map.forEach(
    //(k, v)->{
    //System.out.println("Item: " + k + " Count: " + v);
    //}
    //);
    default void forEach(BiConsumer<? super K, ? super V> action) {
    Objects.requireNonNull(action);
    for (Map.Entry<K, V> entry : entrySet()) {
    K k;
    V v;
    try {
    k = entry.getKey();
    v = entry.getValue();
    } catch(IllegalStateException ise) {
    throw new ConcurrentModificationException(ise);
    }
    action.accept(k, v);
    }
    }
    
    
    default void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {
    Objects.requireNonNull(function);
    for (Map.Entry<K, V> entry : entrySet()) {
    K k;
    V v;
    try {
    k = entry.getKey();
    v = entry.getValue();
    } catch(IllegalStateException ise) {
    throw new ConcurrentModificationException(ise);
    }
    v = function.apply(k, v);
    try {
    entry.setValue(v);
    } catch(IllegalStateException ise) {
    throw new ConcurrentModificationException(ise);
    }
    }
    }
    
    // 如果key对应的value是null就把新的key-value放入map
    default V putIfAbsent(K key, V value) {
    V v = get(key);
    if (v == null) {
    v = put(key, value);
    }
    
    return v;
    }
    
    // 如果map中不存在key，或者key得到的value和提供的value不一样，return false
    // 否则移除key-value，return true
    default boolean remove(Object key, Object value) {
    Object curValue = get(key);
    if (!Objects.equals(curValue, value) ||
    (curValue == null && !containsKey(key))) {
    return false;
    }
    remove(key);
    return true;
    }
    
    // 如果map中不存在key，或者key得到的value和提供的oldvalue不一样，return false
    // 否则put新的key-newValue， return true
    default boolean replace(K key, V oldValue, V newValue) {
    Object curValue = get(key);
    if (!Objects.equals(curValue, oldValue) ||
    (curValue == null && !containsKey(key))) {
    return false;
    }
    put(key, newValue);
    return true;
    }
    
    // 如果map中不存在key，或者key得到的value和提供的oldvalue不一样，return false
    // 否则put新的key-newValue， return true
    default V replace(K key, V value) {
    V curValue;
    if (((curValue = get(key)) != null) || containsKey(key)) {
    curValue = put(key, value);
    }
    return curValue;
    }
    
    // 
    default V computeIfAbsent(K key,
    Function<? super K, ? extends V> mappingFunction) {
    Objects.requireNonNull(mappingFunction);
    V v;
    if ((v = get(key)) == null) {
    V newValue;
    if ((newValue = mappingFunction.apply(key)) != null) {
    put(key, newValue);
    return newValue;
    }
    }
    
    return v;
    }
    
    default V computeIfPresent(K key,
    BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
    Objects.requireNonNull(remappingFunction);
    V oldValue;
    if ((oldValue = get(key)) != null) {
    V newValue = remappingFunction.apply(key, oldValue);
    if (newValue != null) {
    put(key, newValue);
    return newValue;
    } else {
    remove(key);
    return null;
    }
    } else {
    return null;
    }
    }
    
    default V compute(K key,
    BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
    Objects.requireNonNull(remappingFunction);
    V oldValue = get(key);
    
    V newValue = remappingFunction.apply(key, oldValue);
    if (newValue == null) {
    // delete mapping
    if (oldValue != null || containsKey(key)) {
    // something to remove
    remove(key);
    return null;
    } else {
    // nothing to do. Leave things as they were.
    return null;
    }
    } else {
    // add or replace old mapping
    put(key, newValue);
    return newValue;
    }
    }
    
    
    default V merge(K key, V value,
    BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
    Objects.requireNonNull(remappingFunction);
    Objects.requireNonNull(value);
    V oldValue = get(key);
    V newValue = (oldValue == null) ? value :
       remappingFunction.apply(oldValue, value);
    if(newValue == null) {
    remove(key);
    } else {
    put(key, newValue);
    }
    return newValue;
    }
    ｝
如果你恰好逛到了这里，希望你也能喜欢这个博客主题。

如果你也喜欢我的项目，欢迎star和follow我，感激不尽。

—— Mike 后记于 2017.9.14
